"use server";

import { createServerClient } from "@supabase/ssr";
import { cookies } from "next/headers";

function getSupabase() {
  // ✅ cookies() is synchronous in Next.js 15
  const cookieStore = cookies();

  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return cookieStore.get(name)?.value ?? null;
        },
        set() {
          // no-op
        },
        remove() {
          // no-op
        },
      },
    }
  );
}

// ✅ Server action for adding a pillar
export async function addPillar(formData: FormData) {
  const supabase = getSupabase();

  const name = formData.get("name") as string;
  const description =
    (formData.get("description") as string) ?? `Autogenerated description for ${name}`;

  // Get last pillar for sort_order and code
  const { data: existing, error: fetchError } = await supabase
    .from("pillars")
    .select("sort_order, code")
    .order("sort_order", { ascending: false })
    .limit(1);

  if (fetchError) throw new Error(fetchError.message);

  const nextSortOrder = existing?.[0]?.sort_order ? existing[0].sort_order + 1 : 1;
  const nextCode = existing?.[0]?.code
    ? `P${parseInt(existing[0].code.replace("P", ""), 10) + 1}`
    : "P1";

  const { error: insertError } = await supabase.from("pillars").insert([
    {
      code: nextCode,
      name,
      description,
      sort_order: nextSortOrder,
    },
  ]);

  if (insertError) throw new Error(insertError.message);
}
